parameters:
- name: environment
  type: string
  default: 'production'
- name: deployDocs
  type: boolean
  default: false
- name: publishNpm
  type: boolean
  default: false

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '20'
  displayName: 'Setup Node.js'

- task: Cache@2
  inputs:
    key: 'npm | "$(Agent.OS)" | package-lock.json'
    restoreKeys: |
      npm | "$(Agent.OS)"
    path: ~/.npm
  displayName: 'Cache npm'

- script: npm ci
  displayName: 'Install dependencies'

- task: DownloadPipelineArtifact@2
  inputs:
    artifact: 'build-artifacts'
    path: 'dist'
  displayName: 'Download build artifacts'

# Documentation deployment
- ${{ if eq(parameters.deployDocs, true) }}:
  - script: |
      echo "Building documentation..."
      # Add actual docs build command when available
      # npm run docs:build
      mkdir -p docs
      echo "Documentation placeholder" > docs/index.html
    displayName: 'Build documentation'
    
  - task: AzureStaticWebApp@0
    inputs:
      app_location: 'docs'
      api_location: ''
      output_location: ''
      azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APPS_API_TOKEN)
    displayName: 'Deploy to Azure Static Web Apps'
    condition: and(succeeded(), eq('${{ parameters.environment }}', 'production'))

# NPM publishing
- ${{ if eq(parameters.publishNpm, true) }}:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'npm-package'
      path: '$(Pipeline.Workspace)/package'
    displayName: 'Download package artifacts'
    
  - script: |
      PACKAGE_VERSION=$(node -p "require('./package.json').version")
      BUILD_TAG="$(Build.SourceBranchName)"
      RELEASE_VERSION="${BUILD_TAG#v}"
      
      if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
        echo "Package version ($PACKAGE_VERSION) doesn't match release tag ($RELEASE_VERSION)"
        exit 1
      fi
      
      echo "Package version matches release tag: $PACKAGE_VERSION"
    disp