name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

# Add workflow-level permissions
permissions:
  contents: write
  pages: write
  id-token: write
  actions: read
  checks: write

env:
  NODE_VERSION: '20'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check TypeScript types
        run: npm run typecheck
        
      - name: Check code formatting
        run: npm run checkformat

  # Job 2: Test
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test
        
      - name: Run tests with coverage
        if: matrix.node-version == 20
        run: npm run testcoverage
        
      - name: Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Clean previous builds
        run: npm run buildclean
        
      - name: Build TypeScript declarations
        run: npm run buildtypes
        
      - name: Build JavaScript bundles
        run: npm run buildjs
        
      - name: Verify build artifacts
        run: |
          echo "🔍 Checking build artifacts..."
          ls -la dist/
          
          # Check main artifacts exist
          if [ -f "dist/index.js" ] && [ -f "dist/index.esm.js" ] && [ -f "dist/index.d.ts" ]; then
            echo "Main build artifacts present"
          else
            echo "Missing main build artifacts"
            exit 1
          fi
          
          # Check server artifacts exist
          if [ -f "dist/server/index.js" ] && [ -f "dist/server/index.d.ts" ]; then
            echo "Server build artifacts present"
          else
            echo "Missing server build artifacts"
            exit 1
          fi
          
          # Check components artifacts exist
          if [ -f "dist/components/index.js" ] && [ -f "dist/components/index.d.ts" ]; then
            echo "Components build artifacts present"
          else
            echo "Missing components build artifacts"
            exit 1
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            !dist/**/*.map
          retention-days: 30

  # Job 4: Package
  package:
    name: Package
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
        
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          
      - name: Run package validation
        run: npm run validate
        
      - name: Create package
        run: npm pack
        
      - name: Validate package contents
        run: |
          # Check package contents
          echo "Package contents:"
          tar -tzf *.tgz | head -30
          
          # Check package size
          PACKAGE_SIZE=$(stat -f%z *.tgz 2>/dev/null || stat -c%s *.tgz 2>/dev/null || echo "unknown")
          echo "Package size: $PACKAGE_SIZE bytes"
          
          # Test package installation
          npm install *.tgz
          node -e "const pkg = require('@fwc/fat-zebra-nextjs'); console.log('Package installs and imports correctly');"
          
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: '*.tgz'
          retention-days: 30

  # Job 5: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Run license check
        run: npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'
        continue-on-error: true

  # Job 6: Documentation - FIXED AND WORKING
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Get version for documentation
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building docs for version: $VERSION"
          
      - name: Build TypeDoc documentation
        run: |
          echo "🔧 Building TypeDoc documentation for v${{ steps.version.outputs.version }}..."
          
          # Build the docs
          npm run docs
          
          # Verify docs were generated
          if [ -f "docs/index.html" ]; then
            echo "TypeDoc documentation built successfully"
            echo "Documentation files generated:"
            find docs -name "*.html" | wc -l | xargs echo "HTML files:"
          else
            echo "TypeDoc documentation build failed"
            exit 1
          fi
          
      - name: Update documentation with correct version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Updating documentation to reference version $VERSION..."
          
          # Update the main index.html with version info
          if [ -f "docs/index.html" ]; then
            # Add version info to the title and header
            sed -i.bak "s/<title>.*<\/title>/<title>Fat Zebra Next.js Library v$VERSION - API Documentation<\/title>/" docs/index.html
            
            # Add version badge to the documentation
            sed -i.bak "s/<body>/<body><div style=\"background: #28a745; color: white; padding: 0.5rem; text-align: center; font-weight: bold;\">📚 Fat Zebra Next.js Library v$VERSION Documentation<\/div>/" docs/index.html
            
            echo "Documentation updated with version $VERSION"
          fi
          
      - name: Create documentation landing page
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create an enhanced landing page
          cat > docs/README.html << EOF
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Fat Zebra Next.js Library v$VERSION Documentation</title>
              <style>
                  body { 
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                      max-width: 900px; 
                      margin: 0 auto; 
                      padding: 2rem; 
                      line-height: 1.6; 
                      background: #f8f9fa;
                  }
                  .container { background: white; padding: 2rem; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                  .header { text-align: center; margin-bottom: 2rem; }
                  .version-badge { display: inline-block; background: #28a745; color: white; padding: 0.25rem 0.75rem; border-radius: 1rem; font-size: 0.875rem; margin-left: 0.5rem; }
                  .nav-links { display: flex; gap: 1rem; justify-content: center; margin: 2rem 0; flex-wrap: wrap; }
                  .nav-links a { padding: 0.75rem 1.5rem; background: #007acc; color: white; text-decoration: none; border-radius: 6px; transition: background 0.2s; }
                  .nav-links a:hover { background: #005a9e; }
                  .nav-links a.primary { background: #28a745; font-weight: bold; }
                  .nav-links a.primary:hover { background: #1e7e34; }
                  pre { background: #f5f5f5; padding: 1rem; border-radius: 6px; overflow-x: auto; border-left: 4px solid #007acc; }
                  .feature-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem; margin: 2rem 0; }
                  .feature { background: #f8f9fa; padding: 1rem; border-radius: 6px; border-left: 4px solid #28a745; }
                  .feature h3 { margin-top: 0; color: #28a745; }
                  .section { margin: 2rem 0; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🦓 Fat Zebra Next.js Library<span class="version-badge">v$VERSION</span></h1>
                      <p>Modern payment processing for Next.js applications</p>
                  </div>
                  
                  <div class="nav-links">
                      <a href="./index.html" class="primary">📚 API Documentation</a>
                      <a href="https://github.com/rod-higgins/fat-zebra-nextjs">🔧 GitHub Repository</a>
                      <a href="https://www.npmjs.com/package/@fwc/fat-zebra-nextjs">📦 NPM Package</a>
                  </div>
                  
                  <div class="section">
                      <h2>Quick Start</h2>
                      <h3>Installation</h3>
                      <pre><code>npm install @fwc/fat-zebra-nextjs@$VERSION @fat-zebra/sdk</code></pre>
                      
                      <h3>Basic Usage</h3>
                      <pre><code>import { PaymentForm } from '@fwc/fat-zebra-nextjs';

          function App() {
            const handlePayment = (result) => {
              console.log('Payment completed:', result);
            };

            return &lt;PaymentForm onPaymentComplete={handlePayment} /&gt;;
          }</code></pre>
                  </div>
                  
                  <div class="section">
                      <h2>Features</h2>
                      <div class="feature-grid">
                          <div class="feature">
                              <h3>OAuth Authentication</h3>
                              <p>Secure client-side payment processing with OAuth 2.0</p>
                          </div>
                          <div class="feature">
                              <h3>3DS2 Support</h3>
                              <p>Built-in 3D Secure 2.0 authentication</p>
                          </div>
                          <div class="feature">
                              <h3>TypeScript</h3>
                              <p>Full type safety with comprehensive TypeScript definitions</p>
                          </div>
                          <div class="feature">
                              <h3>React Components</h3>
                              <p>Pre-built payment forms and hooks</p>
                          </div>
                          <div class="feature">
                              <h3>⚡ Next.js Optimized</h3>
                              <p>Server and client-side APIs designed for Next.js</p>
                          </div>
                          <div class="feature">
                              <h3>Production Ready</h3>
                              <p>Comprehensive testing and CI/CD pipeline</p>
                          </div>
                      </div>
                  </div>
                  
                  <div class="section">
                      <h2>Documentation</h2>
                      <p><strong><a href="./index.html">→ View Complete API Documentation</a></strong></p>
                      <p>Generated on: $(date)</p>
                      <p>Package Version: $VERSION</p>
                  </div>
              </div>
          </body>
          </html>
          EOF
          
          echo "Enhanced documentation landing page created"
          
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

  # Job 7: Deploy Pages - WORKING VERSION
  deploy-pages:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        
      - name: Show documentation URLs
        run: |
          echo "Documentation deployed successfully!"
          echo "Main URL: ${{ steps.deployment.outputs.page_url }}"
          echo "Landing Page: ${{ steps.deployment.outputs.page_url }}README.html"
          echo "API Documentation: ${{ steps.deployment.outputs.page_url }}index.html"

  # Job 8: Publish to NPM - FIXED VERSION
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, package, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js with NPM registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      # ESSENTIAL: Download the build artifacts
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          
      - name: Verify package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_VERSION="${RELEASE_TAG#v}"
          
          if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Package version ($PACKAGE_VERSION) doesn't match release tag ($RELEASE_VERSION)"
            exit 1
          fi
          
          echo "Package version matches release tag: $PACKAGE_VERSION"
          
      - name: Test NPM authentication
        run: |
          echo "Testing NPM authentication..."
          npm whoami
          echo "NPM authentication successful"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create and publish package
        run: |
          # Create package
          echo "Creating package..."
          npm pack
          
          # List created package
          echo "Package created:"
          ls -la *.tgz
          
          # Publish to NPM
          echo "Publishing to NPM..."
          npm publish --access public --verbose
          
          # Confirm publication
          echo "Package published successfully!"
          echo "Package URL: https://www.npmjs.com/package/@fwc/fat-zebra-nextjs"
          
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.js
            dist/*.d.ts
            *.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 9: Dependency Review (PRs only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD

  # Job 10: Notify (only for main branch and releases)
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, package, security]
    if: always() && (github.event_name == 'release' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify success
        if: needs.lint-and-typecheck.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "CI Pipeline completed successfully!"
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "Version: ${{ github.event.release.tag_name }}"
            echo "Package should be published to NPM"
            echo "Documentation should be updated"
          fi
          
      - name: Notify failure
        if: needs.lint-and-typecheck.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "CI Pipeline failed!"
          echo "Lint/Typecheck: ${{ needs.lint-and-typecheck.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          exit 1