name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check TypeScript types
        run: npm run typecheck
        
      - name: Check TypeScript build config
        run: npm run typecheckbuild
        
      - name: Check TypeScript Next.js config  
        run: npm run typechecknextjs
        
      - name: Check code formatting
        run: npm run checkformat

  # Job 2: Test
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm run test
        
      - name: Run tests with coverage
        if: matrix.node-version == 20
        run: npm run testcoverage
        
      - name: Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Job 3: Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Clean previous build
        run: npm run buildclean
        
      - name: Build TypeScript declarations
        run: npm run buildtypes
        
      - name: Build JavaScript bundles
        run: npm run buildjs
        
      - name: Validate build artifacts
        run: |
          # Check that build artifacts exist
          ls -la dist/
          test -f dist/index.js || { echo "Missing dist/index.js"; exit 1; }
          test -f dist/index.esm.js || { echo "Missing dist/index.esm.js"; exit 1; }
          test -f dist/index.d.ts || { echo "Missing dist/index.d.ts"; exit 1; }
          test -f dist/server/index.js || { echo "Missing dist/server/index.js"; exit 1; }
          test -f dist/server/index.esm.js || { echo "Missing dist/server/index.esm.js"; exit 1; }
          test -f dist/server/index.d.ts || { echo "Missing dist/server/index.d.ts"; exit 1; }
          test -f dist/components/index.js || { echo "Missing dist/components/index.js"; exit 1; }
          test -f dist/components/index.esm.js || { echo "Missing dist/components/index.esm.js"; exit 1; }
          test -f dist/components/index.d.ts || { echo "Missing dist/components/index.d.ts"; exit 1; }
          
      - name: Test package imports
        run: |
          # Test that the built package can be imported
          node -e "const pkg = require('./dist/index.js'); console.log('CJS import works');"
          node -e "import('./dist/index.esm.js').then(() => console.log('ESM import works'));"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # Job 4: Package and Validate
  package:
    name: Package and Validate
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          
      - name: Run package validation
        run: npm run validate
        
      - name: Create package
        run: npm pack
        
      - name: Validate package contents
        run: |
          # Check package contents
          echo "Package contents:"
          tar -tzf *.tgz | head -30
          
          # Check package size
          PACKAGE_SIZE=$(stat -f%z *.tgz 2>/dev/null || stat -c%s *.tgz 2>/dev/null || echo "unknown")
          echo "Package size: $PACKAGE_SIZE bytes"
          
          # Test package installation
          npm install *.tgz
          node -e "const pkg = require('@fwc/fat-zebra-nextjs'); console.log('Package installs and imports correctly');"
          
      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: '*.tgz'
          retention-days: 30

  # Job 5: Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true
        
      - name: Run license check
        run: npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD'
        continue-on-error: true

  # Job 6: Documentation
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build documentation
        run: npm run docs
        
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        if: success()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  # Job 7: Integration Tests (Next.js compatibility)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        next-version: ['13', '14']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          
      - name: Test Next.js ${{ matrix.next-version }} compatibility
        run: |
          # Create a temporary test project
          mkdir -p /tmp/nextjs-test
          cd /tmp/nextjs-test
          
          # Initialize package.json
          npm init -y
          
          # Install Next.js and our package
          npm install next@${{ matrix.next-version }} react react-dom
          npm install $GITHUB_WORKSPACE/*.tgz
          
          # Test import
          node -e "
            try {
              const pkg = require('@fwc/fat-zebra-nextjs');
              const server = require('@fwc/fat-zebra-nextjs/server');
              console.log('Next.js ${{ matrix.next-version }} compatibility test passed');
            } catch (error) {
              console.error('Compatibility test failed:', error.message);
              process.exit(1);
            }
          "

  # Job 8: Publish to NPM (only on releases)
  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, package, security, integration]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: ${{ env.REGISTRY_URL }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          
      - name: Verify package version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          RELEASE_VERSION="${RELEASE_TAG#v}"
          
          if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
            echo "Package version ($PACKAGE_VERSION) doesn't match release tag ($RELEASE_VERSION)"
            exit 1
          fi
          
          echo "Package version matches release tag: $PACKAGE_VERSION"
          
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.js
            dist/*.d.ts
            *.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 9: Dependency Review (PRs only)
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC, 0BSD

  # Job 10: Notify (only for main branch and releases)
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, package, security]
    if: always() && (github.event_name == 'release' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify success
        if: needs.lint-and-typecheck.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: |
          echo "CI Pipeline completed successfully!"
          if [ "${{ github.event_name }}" == "release" ]; then
            echo "Version: ${{ github.event.release.tag_name }}"
            echo "Package should be published to NPM"
          fi
          
      - name: Notify failure
        if: needs.lint-and-typecheck.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "CI Pipeline failed!"
          echo "Lint/Typecheck: ${{ needs.lint-and-typecheck.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          exit 1