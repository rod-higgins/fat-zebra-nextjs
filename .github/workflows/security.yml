name: Security Scan

on:
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM
  workflow_dispatch:
  pull_request:
    paths:
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/security.yml'

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Run npm audit (fix available)
      run: npm audit --audit-level=moderate --parseable
      continue-on-error: true
      
    - name: Check for known vulnerabilities
      run: |
        echo "Checking for known vulnerabilities..."
        # Create audit report
        npm audit --json > audit-report.json || true
        
        # Count vulnerabilities by severity
        HIGH_VULNS=$(cat audit-report.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "high")) | length' 2>/dev/null || echo "0")
        CRITICAL_VULNS=$(cat audit-report.json | jq '.vulnerabilities | to_entries | map(select(.value.severity == "critical")) | length' 2>/dev/null || echo "0")
        
        echo "Critical vulnerabilities: $CRITICAL_VULNS"
        echo "High vulnerabilities: $HIGH_VULNS"
        
        if [ "$CRITICAL_VULNS" -gt 0 ]; then
          echo "Critical vulnerabilities found!"
          exit 1
        fi
        
        if [ "$HIGH_VULNS" -gt 5 ]; then
          echo "Too many high-severity vulnerabilities ($HIGH_VULNS > 5)"
          exit 1
        fi
        
        echo "Security audit passed"
      
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: audit-report.json
        retention-days: 30

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check licenses
      run: |
        echo "Checking package licenses..."
        npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD;Unlicense;WTFPL'
        
    - name: Generate license report
      run: |
        echo "Generating detailed license report..."
        npx license-checker --json --out license-report.json
        npx license-checker --csv --out license-report.csv
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: |
          license-report.json
          license-report.csv
        retention-days: 90

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Check for outdated packages
      run: |
        echo "Checking for outdated packages..."
        npm outdated --long || true
        
    - name: Check dependency tree
      run: |
        echo "Dependency tree analysis..."
        npm ls --depth=2 || true
        
    - name: Check for duplicate packages
      run: |
        echo "Checking for duplicate packages..."
        npx npm-check-duplicates || true

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=package.json
        
    - name: Upload Snyk results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: snyk.sarif

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    strategy:
      matrix:
        language: [ 'javascript' ]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build package
      run: npm run build
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-audit, license-check, dependency-check]
    if: always()
    
    steps:
    - name: Security Summary
      run: |
        echo "Security Scan Summary"
        echo "========================"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "License Check: ${{ needs.license-check.result }}"
        echo "Dependency Check: ${{ needs.dependency-check.result }}"
        
        if [ "${{ needs.security-audit.result }}" == "failure" ]; then
          echo "Security audit failed - please review vulnerabilities"
          exit 1
        fi
        
        if [ "${{ needs.license-check.result }}" == "failure" ]; then
          echo "License check failed - please review package licenses"
          exit 1
        fi
        
        echo "Security scans completed successfully"